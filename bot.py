from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
import json

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
with open("config.json", "r") as f:
    config = json.load(f)

bot = Bot(token=config["bot_token"])
dp = Dispatcher(bot)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
user_data = {}

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("üé∂ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Å–Ω—é –≤ –∞—Ä—Ö–∏–≤.")

@dp.message_handler(content_types=types.ContentType.AUDIO)
async def handle_audio(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id] = {"file_id": message.audio.file_id}
    await message.answer("‚úÖ –ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ!\n–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:")

@dp.message_handler(lambda msg: msg.from_user.id in user_data and "title" not in user_data[msg.from_user.id])
async def get_title(message: types.Message):
    user_data[message.from_user.id]["title"] = message.text
    await message.answer("‚úçÔ∏è –ö—Ç–æ –∞–≤—Ç–æ—Ä –ø–µ—Å–Ω–∏?")

@dp.message_handler(lambda msg: "title" in user_data[msg.from_user.id] and "artist" not in user_data[msg.from_user.id])
async def get_artist(message: types.Message):
    user_data[message.from_user.id]["artist"] = message.text
    await message.answer("üéº –ö–∞–∫–æ–π –∂–∞–Ω—Ä?")

@dp.message_handler(lambda msg: "artist" in user_data[msg.from_user.id] and "genre" not in user_data[msg.from_user.id])
async def get_genre(message: types.Message):
    user_data[msg.from_user.id]["genre"] = message.text
    await message.answer("üåç –ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –ø–µ—Å–Ω—è?")

@dp.message_handler(lambda msg: "genre" in user_data[msg.from_user.id] and "language" not in user_data[msg.from_user.id])
async def get_language(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["language"] = message.text

    song_json = json.dumps(user_data[user_id], indent=2, ensure_ascii=False)

    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("‚úÖ –†–∞–∑—Ä–µ—à–∏—Ç—å", callback_data=f"approve_{user_id}")
    )

    await bot.send_message(
        config["log_channel_id"],
        f"üéµ –ù–æ–≤–∞—è –ø–µ—Å–Ω—è –æ—Ç @{message.from_user.username or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'}:\n\n<pre>{song_json}</pre>\n\n{config['admin_username']}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    await message.answer("üéß –°–ø–∞—Å–∏–±–æ! –ü–µ—Å–Ω—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    user_data[user_id]["audio_message_id"] = message.message_id

@dp.callback_query_handler(lambda c: c.data.startswith("approve_"))
async def approve_song(callback: types.CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    data = user_data.get(user_id)

    if data:
        await bot.forward_message(
            config["archive_channel_id"],
            from_chat_id=callback.message.chat.id,
            message_id=data["audio_message_id"]
        )
        await callback.answer("‚úÖ –ü–µ—Å–Ω—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∞—Ä—Ö–∏–≤!")
    else:
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")

if __name__ == "__main__":
    executor.start_polling(dp)
