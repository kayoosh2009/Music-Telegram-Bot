import logging
import os
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import yt_dlp
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
BOT_TOKEN = os.environ.get("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('music_cache.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS tracks
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  title TEXT,
                  artist TEXT,
                  youtube_url TEXT UNIQUE,
                  file_id TEXT,
                  genre TEXT,
                  duration INTEGER)''')
    conn.commit()
    conn.close()

# –ñ–∞–Ω—Ä—ã —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
GENRES = {
    'üé∏ –†–æ–∫': ['rock music', 'rock hits', 'classic rock'],
    'üé§ –ü–æ–ø': ['pop music', 'pop hits', 'top pop songs'],
    'üéß –•–∏–ø-—Ö–æ–ø': ['hip hop music', 'rap hits', 'hip hop beats'],
    'üéπ –î–∂–∞–∑': ['jazz music', 'smooth jazz', 'jazz classics'],
    'üéµ –≠–ª–µ–∫—Ç—Ä–æ': ['electronic music', 'edm hits', 'electronic dance'],
    'üéª –ö–ª–∞—Å—Å–∏–∫–∞': ['classical music', 'orchestra', 'classical piano']
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏ –Ω–∞ YouTube
def search_youtube(query, max_results=5):
    ydl_opts = {
        'format': 'bestaudio/best',
        'quiet': True,
        'no_warnings': True,
        'extract_flat': True,
        'socket_timeout': 30,
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            search_results = ydl.extract_info(f"ytsearch{max_results}:{query}", download=False)
            if 'entries' in search_results:
                return search_results['entries']
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏
async def download_audio(youtube_url):
    output_path = '/tmp/downloads'
    os.makedirs(output_path, exist_ok=True)
    
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': f'{output_path}/%(id)s.%(ext)s',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'quiet': True,
        'no_warnings': True,
        'socket_timeout': 30,
    }
    
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(youtube_url, download=True)
            filename = ydl.prepare_filename(info).replace('.webm', '.mp3').replace('.m4a', '.mp3')
            return filename, info.get('title', 'Unknown'), info.get('duration', 0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
        return None, None, None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞ –≤ –ë–î
def get_cached_track(youtube_url):
    conn = sqlite3.connect('music_cache.db')
    c = conn.cursor()
    c.execute("SELECT file_id, title FROM tracks WHERE youtube_url = ?", (youtube_url,))
    result = c.fetchone()
    conn.close()
    return result

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
def save_to_cache(title, youtube_url, file_id, genre, duration):
    conn = sqlite3.connect('music_cache.db')
    c = conn.cursor()
    try:
        c.execute("INSERT INTO tracks (title, youtube_url, file_id, genre, duration) VALUES (?, ?, ?, ?, ?)",
                  (title, youtube_url, file_id, genre, duration))
        conn.commit()
    except sqlite3.IntegrityError:
        pass  # –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    conn.close()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu_keyboard():
    keyboard = []
    row = []
    for i, genre in enumerate(GENRES.keys()):
        row.append(InlineKeyboardButton(genre, callback_data=f"genre_{i}"))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    
    keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="search")])
    return InlineKeyboardMarkup(keyboard)

# –ú–µ–Ω—é –∂–∞–Ω—Ä–∞
def genre_menu_keyboard(genre_index):
    keyboard = []
    genre_name = list(GENRES.keys())[genre_index]
    
    keyboard.append([InlineKeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫", callback_data=f"random_{genre_index}")])
    keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤ –∂–∞–Ω—Ä–µ", callback_data=f"search_{genre_index}")])
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_main")])
    
    return InlineKeyboardMarkup(keyboard)

# –ú–µ–Ω—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
def search_results_keyboard(results, genre=None):
    keyboard = []
    for i, result in enumerate(results[:5]):
        title = result.get('title', 'Unknown')
        if len(title) > 40:
            title = title[:37] + "..."
        keyboard.append([InlineKeyboardButton(
            f"üéµ {title}", 
            callback_data=f"play_{result['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_main")])
    return InlineKeyboardMarkup(keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üéµ *–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç*\n\n"
        "–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫:",
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back_main":
        await query.edit_message_text(
            "üéµ *–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π –±–æ—Ç*\n\n"
            "–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫:",
            parse_mode='Markdown',
            reply_markup=main_menu_keyboard()
        )
    
    # –í—ã–±–æ—Ä –∂–∞–Ω—Ä–∞
    elif data.startswith("genre_"):
        genre_index = int(data.split("_")[1])
        genre_name = list(GENRES.keys())[genre_index]
        await query.edit_message_text(
            f"*{genre_name}*\n\n–ß—Ç–æ —Ö–æ—á–µ—à—å –ø–æ—Å–ª—É—à–∞—Ç—å?",
            parse_mode='Markdown',
            reply_markup=genre_menu_keyboard(genre_index)
        )
    
    # –°–ª—É—á–∞–π–Ω—ã–π —Ç—Ä–µ–∫ –∏–∑ –∂–∞–Ω—Ä–∞
    elif data.startswith("random_"):
        genre_index = int(data.split("_")[1])
        genre_name = list(GENRES.keys())[genre_index]
        search_query = GENRES[genre_name][0]
        
        await query.edit_message_text(f"üîç –ò—â—É –º—É–∑—ã–∫—É –≤ –∂–∞–Ω—Ä–µ {genre_name}...")
        
        results = search_youtube(search_query, max_results=5)
        if results:
            await query.edit_message_text(
                f"*{genre_name}*\n\n–í—ã–±–µ—Ä–∏ —Ç—Ä–µ–∫:",
                parse_mode='Markdown',
                reply_markup=search_results_keyboard(results, genre_name)
            )
        else:
            await query.edit_message_text(
                "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∂–∞–Ω—Ä.",
                reply_markup=main_menu_keyboard()
            )
    
    # –ü–æ–∏—Å–∫
    elif data == "search":
        await query.edit_message_text(
            "üîç *–ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:",
            parse_mode='Markdown'
        )
        context.user_data['awaiting_search'] = True
    
    # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
    elif data.startswith("play_"):
        video_id = data.split("_", 1)[1]
        youtube_url = f"https://www.youtube.com/watch?v={video_id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached = get_cached_track(youtube_url)
        
        if cached:
            file_id, title = cached
            await query.edit_message_text(f"üéµ –û—Ç–ø—Ä–∞–≤–ª—è—é: *{title}*", parse_mode='Markdown')
            await context.bot.send_audio(
                chat_id=query.message.chat_id,
                audio=file_id
            )
            await query.message.reply_text(
                "–•–æ—á–µ—à—å –µ—â—ë –º—É–∑—ã–∫–∏?",
                reply_markup=main_menu_keyboard()
            )
        else:
            await query.edit_message_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
            
            filename, title, duration = await download_audio(youtube_url)
            
            if filename and os.path.exists(filename):
                try:
                    with open(filename, 'rb') as audio:
                        message = await context.bot.send_audio(
                            chat_id=query.message.chat_id,
                            audio=audio,
                            title=title,
                            duration=duration
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –≤ –∫—ç—à
                        file_id = message.audio.file_id
                        save_to_cache(title, youtube_url, file_id, "Unknown", duration)
                    
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                    os.remove(filename)
                    
                    await query.edit_message_text(
                        f"‚úÖ *{title}*\n\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!",
                        parse_mode='Markdown'
                    )
                    await query.message.reply_text(
                        "–•–æ—á–µ—à—å –µ—â—ë –º—É–∑—ã–∫–∏?",
                        reply_markup=main_menu_keyboard()
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
                    if os.path.exists(filename):
                        os.remove(filename)
                    await query.edit_message_text(
                        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.",
                        reply_markup=main_menu_keyboard()
                    )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç—Ä–µ–∫. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π.",
                    reply_markup=main_menu_keyboard()
                )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get('awaiting_search'):
        search_query = update.message.text
        context.user_data['awaiting_search'] = False
        
        msg = await update.message.reply_text(f"üîç –ò—â—É: *{search_query}*...", parse_mode='Markdown')
        
        results = search_youtube(search_query, max_results=5)
        
        if results:
            await msg.edit_text(
                f"*–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n\n`{search_query}`",
                parse_mode='Markdown',
                reply_markup=search_results_keyboard(results)
            )
        else:
            await msg.edit_text(
                "‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
                reply_markup=main_menu_keyboard()
            )

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω BOT_TOKEN! –£—Å—Ç–∞–Ω–æ–≤–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Render!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main() 
