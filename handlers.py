import os
import random
from telebot import types
from utils import load_json, save_json, add_user, update_stats, log_action
import user_state

# –ü—É—Ç–∏ –∫ JSON
DATA_DIR = "data"
SONGS_FILE = os.path.join(DATA_DIR, "songs.json")
PLAYLISTS_FILE = os.path.join(DATA_DIR, "playlists.json")

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def kb_main():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üéß –ñ–∞–Ω—Ä—ã", "üé≤ –†–∞–Ω–¥–æ–º")
    kb.add("üéµ –ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã", "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç")
    kb.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üí¨ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Å–Ω—é")
    return kb


def kb_genres():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    # —Ä—É—Å—Å–∫–∏–µ –∂–∞–Ω—Ä—ã —Å–≤–µ—Ä—Ö—É
    genres = ["–ü–∞–Ω–∫", "–ü–æ—Å—Ç–ø–∞–Ω–∫", "–õ–æ—É—Ñ–∞–π", "–ü–æ–ø", "–†–æ–∫", "–†—ç–ø", "–ò–Ω–¥–∏"]
    kb.add(*genres)
    kb.add("üîô –í –º–µ–Ω—é")
    return kb


def kb_player():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚èÆ –ù–∞–∑–∞–¥", "‚è≠ –í–ø–µ—Ä—ë–¥")
    kb.add("‚ûï –í –ø–ª–µ–π–ª–∏—Å—Ç", "üîô –í –º–µ–Ω—é")
    return kb


def kb_playlist_base():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìú –ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã", "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç")
    kb.add("üîô –í –º–µ–Ω—é")
    return kb


# --- –£—Ç–∏–ª–∏—Ç—ã ---
def _norm(txt: str) -> str:
    return str(txt).strip().lower()


def _send_audio(bot, chat_id, song):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        if str(song["url"]).startswith("file_id:"):
            file_id = song["url"].replace("file_id:", "")
            bot.send_audio(chat_id, file_id, title=song["name"], performer=song["artist"])
        else:
            bot.send_message(chat_id, f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {song['name']}")
    except Exception as e:
        bot.send_message(chat_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç—Ä–µ–∫–∞: {e}")
        log_action(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–µ–∫–∞ {song.get('name')}: {e}")


# === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –•–ï–ù–î–õ–ï–†–û–í ===
def register_handlers(bot):
    # /start
    @bot.message_handler(commands=["start"])
    def cmd_start(msg):
        add_user(msg.from_user)
        update_stats("registered_users")
        bot.send_message(
            msg.chat.id,
            f"–ü—Ä–∏–≤–µ—Ç, {msg.from_user.first_name}! üëã\n\n–Ø ‚Äî Telegram Music üéß\n"
            "–í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –∏–ª–∏ –≤–∫–ª—é—á–∏ —Ä–∞–Ω–¥–æ–º, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–ª—É—à–∞—Ç—å!",
            reply_markup=kb_main(),
        )
        log_action(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    @bot.message_handler(func=lambda m: _norm(m.text) in {_norm("üè† –º–µ–Ω—é"), _norm("üîô –≤ –º–µ–Ω—é")})
    def cmd_menu(msg):
        bot.send_message(msg.chat.id, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb_main())

    # --- –ñ–ê–ù–†–´ ---
    @bot.message_handler(func=lambda m: _norm(m.text) in {_norm("üéß –∂–∞–Ω—Ä—ã")})
    def cmd_genres(msg):
        bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=kb_genres())

    @bot.message_handler(func=lambda m: _norm(m.text) in {_norm(x) for x in ["–ø–∞–Ω–∫", "–ø–æ—Å—Ç–ø–∞–Ω–∫", "–ª–æ—É—Ñ–∞–π", "–ø–æ–ø", "—Ä–æ–∫", "—Ä—ç–ø", "–∏–Ω–¥–∏"]})
    def handle_genre_selection(msg):
        genre = msg.text.strip()
        songs = load_json(SONGS_FILE, [])
        available = [s for s in songs if _norm(s.get("genre")) == _norm(genre)]

        if not available:
            bot.send_message(msg.chat.id, f"‚ö†Ô∏è –ù–µ—Ç –ø–µ—Å–µ–Ω –≤ –∂–∞–Ω—Ä–µ {genre}.", reply_markup=kb_main())
            return

        song = random.choice(available)
        _send_audio(bot, msg.chat.id, song)

        user_state.save_user_state(msg.from_user.id, {"genre": genre, "played": [song["id"]], "last_song_id": song["id"]})
        update_stats("songs_played")

        bot.send_message(msg.chat.id, "üéß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–æ–º:", reply_markup=kb_player())

    # --- –†–ê–ù–î–û–ú ---
    @bot.message_handler(func=lambda m: _norm(m.text) == _norm("üé≤ —Ä–∞–Ω–¥–æ–º"))
    def cmd_random(msg):
        songs = load_json(SONGS_FILE, [])
        if not songs:
            bot.send_message(msg.chat.id, "–ù–µ—Ç –ø–µ—Å–µ–Ω –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.", reply_markup=kb_main())
            return

        st = user_state.get_user_state(msg.from_user.id)
        played = st.get("played", [])

        available = [s for s in songs if s["id"] not in played]
        if not available:
            st["played"] = []
            user_state.save_user_state(msg.from_user.id, st)
            available = songs

        song = random.choice(available)
        _send_audio(bot, msg.chat.id, song)

        st.setdefault("played", []).append(song["id"])
        st["last_song_id"] = song["id"]
        user_state.save_user_state(msg.from_user.id, st)

        update_stats("songs_played")
        bot.send_message(msg.chat.id, "üéß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–æ–º:", reply_markup=kb_player())

    # --- –ü–õ–ï–ï–† ---
    @bot.message_handler(func=lambda m: _norm(m.text) in {_norm("‚è≠ –≤–ø–µ—Ä—ë–¥"), _norm("‚èÆ –Ω–∞–∑–∞–¥"), _norm("‚ûï –≤ –ø–ª–µ–π–ª–∏—Å—Ç"), _norm("üîô –≤ –º–µ–Ω—é")})
    def cmd_player_controls(msg):
        txt = _norm(msg.text)
        chat = msg.chat.id
        uid = msg.from_user.id

        if txt == _norm("üîô –≤ –º–µ–Ω—é"):
            bot.send_message(chat, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=kb_main())
            return

        songs = load_json(SONGS_FILE, [])
        if not songs:
            bot.send_message(chat, "‚ö†Ô∏è –ù–µ—Ç –ø–µ—Å–µ–Ω.", reply_markup=kb_main())
            return

        st = user_state.get_user_state(uid)
        genre = st.get("genre")
        played = st.get("played", [])
        last_id = st.get("last_song_id")

        # –í–ø–µ—Ä—ë–¥
        if txt == _norm("‚è≠ –≤–ø–µ—Ä—ë–¥"):
            pool = [s for s in songs if not genre or _norm(s.get("genre")) == _norm(genre)]
            available = [s for s in pool if s["id"] not in played and s["id"] != last_id]

            if not available:
                st["played"] = []
                user_state.save_user_state(uid, st)
                available = [s for s in pool if s["id"] != last_id]

            if not available:
                bot.send_message(chat, "üéµ –≠—Ç–æ –≤—Å–µ –ø–µ—Å–Ω–∏ –≤ —ç—Ç–æ–º –∂–∞–Ω—Ä–µ!", reply_markup=kb_main())
                return

            song = random.choice(available)
            st.setdefault("played", []).append(song["id"])
            st["last_song_id"] = song["id"]
            user_state.save_user_state(uid, st)

            _send_audio(bot, chat, song)
            update_stats("songs_played")
            return

        # –ù–∞–∑–∞–¥
        if txt == _norm("‚èÆ –Ω–∞–∑–∞–¥"):
            if len(played) >= 2:
                prev_id = played[-2]
                prev_song = next((s for s in songs if s["id"] == prev_id), None)
                if prev_song:
                    st["played"] = played[:-1]
                    st["last_song_id"] = prev_id
                    user_state.save_user_state(uid, st)
                    _send_audio(bot, chat, prev_song)
                    return
            bot.send_message(chat, "–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –ø–µ—Å–Ω–∏.", reply_markup=kb_player())
            return

        # –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç
        if txt == _norm("‚ûï –≤ –ø–ª–µ–π–ª–∏—Å—Ç"):
            last = st.get("last_song_id")
            if not last:
                bot.send_message(chat, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–µ—Å–Ω–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.", reply_markup=kb_main())
                return

            pls = load_json(PLAYLISTS_FILE, [])
            my = [p for p in pls if p["owner_id"] == uid]
            if not my:
                bot.send_message(chat, "–£ –≤–∞—Å –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤.", reply_markup=kb_playlist_base())
                return

            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for p in my:
                kb.add(p["name"])
            kb.add("üîô –í –º–µ–Ω—é")

            st["awaiting_add_song_id"] = last
            user_state.save_user_state(uid, st)

            bot.send_message(chat, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=kb)
            return

    # --- –°–û–ó–î–ê–ù–ò–ï –ü–õ–ï–ô–õ–ò–°–¢–ê ---
    @bot.message_handler(func=lambda m: _norm(m.text) == _norm("‚ûï —Å–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç"))
    def cmd_create_playlist(msg):
        pls = load_json(PLAYLISTS_FILE, [])
        new_pl = {
            "id": len(pls) + 1,
            "owner_id": msg.from_user.id,
            "name": f"–ú–æ–π –ø–ª–µ–π–ª–∏—Å—Ç {len(pls) + 1}",
            "public": True,
            "songs": [],
        }
        pls.append(new_pl)
        save_json(PLAYLISTS_FILE, pls)
        update_stats("playlists_created")
        bot.send_message(msg.chat.id, f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç: {new_pl['name']}", reply_markup=kb_playlist_base())

    # --- –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–ï–°–ù–ò ---
    @bot.message_handler(func=lambda m: True)
    def handle_all(msg):
        uid = msg.from_user.id
        st = user_state.get_user_state(uid)
        song_id = st.get("awaiting_add_song_id")

        if song_id and msg.text:
            pls = load_json(PLAYLISTS_FILE, [])
            pl = next((p for p in pls if p["owner_id"] == uid and _norm(p["name"]) == _norm(msg.text)), None)

            if pl:
                if song_id not in pl["songs"]:
                    pl["songs"].append(song_id)
                    save_json(PLAYLISTS_FILE, pls)
                    bot.send_message(msg.chat.id, "‚úÖ –ü–µ—Å–Ω—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç!", reply_markup=kb_player())
                else:
                    bot.send_message(msg.chat.id, "‚ö†Ô∏è –ü–µ—Å–Ω—è —É–∂–µ –≤ —ç—Ç–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ.", reply_markup=kb_player())
            else:
                bot.send_message(msg.chat.id, "‚ö†Ô∏è –ü–ª–µ–π–ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=kb_main())

            st.pop("awaiting_add_song_id", None)
            user_state.save_user_state(uid, st)
            return

        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
        bot.send_message(msg.chat.id, "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=kb_main())
