import json
import logging
import os
from aiogram import types, Router, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

router = Router()
logger = logging.getLogger(__name__)

ADMIN_ID = int(os.getenv("ADMIN_ID"))
LOGS_ID = os.getenv("LOGS_ID")
SONGS_FILE = "songs.json"


# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–µ–Ω ---
class AddSong(StatesGroup):
    waiting_for_info = State()


class MessageAdmin(StatesGroup):
    waiting_for_text = State()


# --- –†–∞–±–æ—Ç–∞ —Å songs.json ---
def load_songs():
    try:
        with open(SONGS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Å–µ–Ω: {e}")
        return []


def save_songs(data):
    with open(SONGS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


songs = load_songs()


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def genre_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üéß Lofi", callback_data="genre_lofi")],
        [InlineKeyboardButton(text="üí´ Synthwave", callback_data="genre_synthwave")],
        [InlineKeyboardButton(text="üî• Other", callback_data="genre_other")]
    ])


# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@router.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer(
        "‚ö°Ô∏è –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ö–æ—Å—Ç–∏–Ω–≥–µ Render, "
        "–ø–æ—ç—Ç–æ–º—É –º–æ–∂–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–æ 60 —Å–µ–∫—É–Ω–¥ ‚è≥\n\n"
        "üé∂ –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä –º—É–∑—ã–∫–∏:",
        reply_markup=genre_keyboard()
    )


# --- –ö–æ–º–∞–Ω–¥–∞ /menu ---
@router.message(Command("menu"))
async def menu_cmd(message: types.Message, bot):
    chat_id = message.chat.id
    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π
    for msg_id in range(message.message_id, message.message_id - 50, -1):
        try:
            await bot.delete_message(chat_id, msg_id)
        except Exception:
            pass
    await bot.send_message(chat_id, "üéµ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=genre_keyboard())


# --- –ö–æ–º–∞–Ω–¥–∞ /admin ---
@router.message(Command("admin"))
async def contact_admin(message: types.Message, state: FSMContext):
    await message.reply("‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:")
    await state.set_state(MessageAdmin.waiting_for_text)


@router.message(MessageAdmin.waiting_for_text)
async def forward_to_admin(message: types.Message, bot, state: FSMContext):
    text = f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É:\n–û—Ç: @{message.from_user.username or message.from_user.full_name}\n\n{text}"
    await bot.send_message(ADMIN_ID, text)
    await message.reply("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É.")
    await state.clear()


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ –æ—Ç –∞–¥–º–∏–Ω–∞ ---
@router.message(F.audio)
async def handle_audio(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ–±–∞–≤–ª—è—Ç—å –ø–µ—Å–Ω–∏.")
        return

    file_id = message.audio.file_id
    await state.update_data(file_id=file_id)
    await message.reply(
        "üéµ –û—Ç–ø—Ä–∞–≤—å –¥–∞–Ω–Ω—ã–µ –æ –ø–µ—Å–Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "`NAME: ...`\n`ARTIST: ...`\n`GENRE: ...`",
        parse_mode="Markdown"
    )
    await state.set_state(AddSong.waiting_for_info)


# --- –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –æ—Ç –∞–¥–º–∏–Ω–∞ ---
@router.message(AddSong.waiting_for_info)
async def get_song_info(message: types.Message, state: FSMContext, bot):
    data = await state.get_data()
    file_id = data["file_id"]

    lines = message.text.strip().split("\n")
    song_info = {"id": len(songs) + 1, "file_id": file_id}

    for line in lines:
        if ":" not in line:
            continue
        key, value = line.split(":", 1)
        song_info[key.strip().lower()] = value.strip()

    if not all(k in song_info for k in ("name", "artist", "genre")):
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å NAME, ARTIST –∏ GENRE.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    for s in songs:
        if s["name"].lower() == song_info["name"].lower():
            s.update(song_info)
            save_songs(songs)
            await message.reply(f"üîÅ –ü–µ—Å–Ω—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: *{s['name']}*", parse_mode="Markdown")
            await state.clear()
            return

    songs.append(song_info)
    save_songs(songs)

    await message.reply(f"‚úÖ –ü–µ—Å–Ω—è –¥–æ–±–∞–≤–ª–µ–Ω–∞: *{song_info['name']}* ‚Äî {song_info['artist']}",
                        parse_mode="Markdown")

    # –ª–æ–≥ –≤ –∫–∞–Ω–∞–ª
    try:
        await bot.send_message(
            LOGS_ID,
            f"üéµ –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–µ—Å–Ω—è:\n"
            f"ID: {song_info['id']}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {song_info['name']}\n"
            f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {song_info['artist']}\n"
            f"–ñ–∞–Ω—Ä: {song_info['genre']}"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥: {e}")

    await state.clear()


# --- –í—ã–±–æ—Ä –∂–∞–Ω—Ä–∞ ---
@router.callback_query(lambda c: c.data.startswith("genre_"))
async def select_genre(callback: types.CallbackQuery):
    genre = callback.data.split("_", 1)[1]
    genre_songs = [s for s in songs if s["genre"].lower() == genre.lower()]

    if not genre_songs:
        markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è", callback_data="go_back")]
        ])
        await callback.message.edit_text(
            f"üòï –ü–µ—Å–Ω–∏ –≤ –∂–∞–Ω—Ä–µ *{genre}* –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
            parse_mode="Markdown",
            reply_markup=markup
        )
        return

    song = genre_songs[0]
    caption = f"üéµ <b>{song['name']}</b>\nüë§ <i>{song['artist']}</i>\nüéß –ñ–∞–Ω—Ä: {song['genre']}"
    buttons = [
        [InlineKeyboardButton(text="‚ñ∂Ô∏è –°–ª—É—à–∞—Ç—å", callback_data=f"play_{song['id']}")],
        [InlineKeyboardButton(text="üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"import_{song['id']}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="go_back")]
    ]
    await callback.message.edit_text(caption, parse_mode="HTML",
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=buttons))


# --- –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∂–∞–Ω—Ä–æ–≤ ---
@router.callback_query(lambda c: c.data == "go_back")
async def go_back(callback: types.CallbackQuery):
    await callback.message.edit_text("üé∂ –í—ã–±–µ—Ä–∏ –∂–∞–Ω—Ä:", reply_markup=genre_keyboard())


# --- –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ ---
@router.callback_query(lambda c: c.data.startswith("play_"))
async def play_song(callback: types.CallbackQuery):
    song_id = int(callback.data.split("_", 1)[1])
    song = next((s for s in songs if s["id"] == song_id), None)

    if not song:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Å–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    await callback.message.answer_audio(
        audio=song["file_id"],
        caption=f"üéß –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç: <b>{song['name']}</b>\nüë§ {song['artist']}",
        parse_mode="HTML"
    )

    await callback.answer("‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å")
