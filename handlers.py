import random
from telebot import types
from utils import load_json, save_json, add_user, update_stats, log_action
import user_state  # –Ω–∞—à –º–æ–¥—É–ª—å user_state.py

SONGS_FILE = "songs.json"
PLAYLISTS_FILE = "playlists.json"

def register_handlers(bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏. –í—Å—ë —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏, –ø–ª–µ–µ—Ä –ø–æ–º–Ω–∏—Ç –∂–∞–Ω—Ä –∏ –∏—Å—Ç–æ—Ä–∏—é played."""

    # ---- –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----
    def main_menu_kb():
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.row("üé≤ –†–∞–Ω–¥–æ–º", "üéß –ñ–∞–Ω—Ä—ã")
        kb.row("üîç –ü–æ–∏—Å–∫", "üìÇ –ü–ª–µ–π–ª–∏—Å—Ç—ã")
        kb.row("üé§ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Å–Ω—é")
        return kb

    def player_kb():
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.row("‚èÆ –ù–∞–∑–∞–¥", "‚ûï –í –ø–ª–µ–π–ª–∏—Å—Ç", "‚è≠ –í–ø–µ—Ä—ë–¥")
        kb.row("üîô –í –º–µ–Ω—é")
        return kb

    def create_playlist_kb():
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", "üîô –í –º–µ–Ω—é")
        return kb

    # ---- /start ----
    @bot.message_handler(commands=["start"])
    def start_cmd(message):
        add_user(message.from_user)
        log_action(bot, None, f"/start –æ—Ç @{message.from_user.username or message.from_user.id}")
        bot.send_message(message.chat.id, "üéµ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb())

    # ---- –†–∞–Ω–¥–æ–º ----
    @bot.message_handler(func=lambda m: m.text == "üé≤ –†–∞–Ω–¥–æ–º")
    def random_song(message):
        songs = load_json(SONGS_FILE, [])
        if not songs:
            bot.send_message(message.chat.id, "üò¢ –í –∞—Ä—Ö–∏–≤–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–µ—Å–µ–Ω.", reply_markup=main_menu_kb())
            return
        song = random.choice(songs)
        send_song(bot, message.chat.id, song)
        update_stats("songs_played")
        # —Å–±—Ä–∞—Å—ã–≤–∞–µ–º genre –∏ —Å—Ç–∞–≤–∏–º played —Ç–æ–ª—å–∫–æ —Å —ç—Ç–æ–π –ø–µ—Å–Ω–µ–π
        user_state.save_user_state(message.from_user.id, {"genre": None, "played": [song["id"]], "last_song_id": song["id"]})

    # ---- –ñ–∞–Ω—Ä—ã ----
    @bot.message_handler(func=lambda m: m.text == "üéß –ñ–∞–Ω—Ä—ã")
    def genres_list(message):
        songs = load_json(SONGS_FILE, [])
        genres = sorted({s.get("genre", "Unknown") for s in songs})
        if not genres:
            bot.send_message(message.chat.id, "üéµ –ñ–∞–Ω—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=main_menu_kb())
            return
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for g in genres:
            kb.add(g)
        kb.add("üîô –í –º–µ–Ω—é")
        bot.send_message(message.chat.id, "üéº –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=kb)

    # ---- –í—ã–±–æ—Ä –∂–∞–Ω—Ä–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∂–∞–Ω—Ä–æ–º) ----
    @bot.message_handler(func=lambda m: True)
    def choose_genre_or_handle_buttons(message):
        txt = (message.text or "").strip()
        chat = message.chat.id

        # –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        if txt == "üîô –í –º–µ–Ω—é":
            bot.send_message(chat, "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
            return

        # –∫–æ–º–∞–Ω–¥—ã –ø–ª–µ–µ—Ä–∞
        if txt in {"‚èÆ –ù–∞–∑–∞–¥", "‚è≠ –í–ø–µ—Ä—ë–¥", "‚ûï –í –ø–ª–µ–π–ª–∏—Å—Ç"}:
            # –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π handler (–≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é)
            handle_player_controls(message)
            return

        # –µ—Å–ª–∏ —ç—Ç–æ –∂–∞–Ω—Ä ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        songs = load_json(SONGS_FILE, [])
        genres = {s.get("genre", "Unknown") for s in songs}
        if txt in genres:
            songs_by_genre = [s for s in songs if (s.get("genre") or "").lower() == txt.lower()]
            if not songs_by_genre:
                bot.send_message(chat, "üò¢ –ü–µ—Å–µ–Ω –≤ —ç—Ç–æ–º –∂–∞–Ω—Ä–µ –ø–æ–∫–∞ –Ω–µ—Ç.", reply_markup=main_menu_kb())
                return
            # –≤—ã–±–æ—Ä –ø–µ—Å–Ω–∏ –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–æ–≤: –æ—Ç–º–µ—á–∞–µ–º played
            state = user_state.get_user_state(message.from_user.id)
            played = state.get("played", [])
            available = [s for s in songs_by_genre if s["id"] not in played]
            if not available:
                # –≤—Å–µ —Å—ã–≥—Ä–∞–Ω—ã ‚Äî –æ—á–∏—Å—Ç–∏–º –∏—Å—Ç–æ—Ä–∏—é (–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–º last_song_id –µ—Å–ª–∏ —Ö–æ—Ç–∏–º)
                played = []
                available = songs_by_genre.copy()
            song = random.choice(available)
            played.append(song["id"])
            state["genre"] = txt
            state["played"] = played
            state["last_song_id"] = song["id"]
            user_state.save_user_state(message.from_user.id, state)
            send_song(bot, chat, song)
            update_stats("songs_played")
            return

        # –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–µ–Ω—é-–∫–Ω–æ–ø–∫–∏ (–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–≤–æ–¥—ã —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
        buttons = {"üé≤ –†–∞–Ω–¥–æ–º", "üéß –ñ–∞–Ω—Ä—ã", "üîç –ü–æ–∏—Å–∫", "üìÇ –ü–ª–µ–π–ª–∏—Å—Ç—ã", "üé§ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Å–Ω—é"}
        if txt in buttons:
            # –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—ë–º—Å—è
            return

        # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω ‚Äî –Ω–∞–ø–æ–º–Ω–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏
        bot.send_message(chat, "üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=main_menu_kb())

    # ---- –ü–ª–µ–µ—Ä: Prev / Next / Add to playlist ----
    def handle_player_controls(message):
        txt = (message.text or "").strip()
        chat = message.chat.id
        user_id = message.from_user.id

        songs = load_json(SONGS_FILE, [])
        if not songs:
            bot.send_message(chat, "üò¢ –í –∞—Ä—Ö–∏–≤–µ –Ω–µ—Ç –ø–µ—Å–µ–Ω.", reply_markup=main_menu_kb())
            return

        state = user_state.get_user_state(user_id)
        genre = state.get("genre")  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
        played = state.get("played", [])
        last_song_id = state.get("last_song_id")

        # –∏—Å–ø–æ–ª—å–∑—É–µ–º pool ‚Äî –µ—Å–ª–∏ genre –∑–∞–¥–∞–Ω, –±–µ—Ä—ë–º –ø–µ—Å–Ω–∏ —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–µ–≥–æ
        if genre:
            pool = [s for s in songs if (s.get("genre") or "").lower() == genre.lower()]
        else:
            pool = songs.copy()

        # —É–±—Ä–∞—Ç—å –ø–æ–≤—Ç–æ—Ä—ã –ø–æ–¥—Ä—è–¥: –¥–æ—Å—Ç—É–ø–Ω—ã–µ ‚Äî —Ç–µ, —á—Ç–æ –Ω–µ –≤ played
        available = [s for s in pool if s["id"] not in played]

        if txt == "‚è≠ –í–ø–µ—Ä—ë–¥":
            if not available:
                # –µ—Å–ª–∏ –≤—Å–µ —Å—ã–≥—Ä–∞–Ω—ã ‚Äî –æ—á–∏—Å—Ç–∏–º –∏—Å—Ç–æ—Ä–∏—é –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å –ø—É–ª
                played = []
                available = pool.copy()
            # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∏–∑ available
            song = random.choice(available)
            played.append(song["id"])
            state["played"] = played
            state["last_song_id"] = song["id"]
            user_state.save_user_state(user_id, state)
            send_song(bot, chat, song)
            update_stats("songs_played")
            return

        if txt == "‚èÆ –ù–∞–∑–∞–¥":
            # –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é: –µ—Å–ª–∏ played –µ—Å—Ç—å –∏ len>1 ‚Äî –≤–µ—Ä–Ω—ë–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
            if played and len(played) >= 2:
                # current is last element; previous is -2
                prev_id = played[-2]
                prev_song = next((s for s in pool if s["id"] == prev_id), None)
                if prev_song:
                    # –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º played: —É–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π (current), –æ—Å—Ç–∞–≤–ª—è–µ–º prev –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π
                    played = played[:-1]
                    state["played"] = played
                    state["last_song_id"] = prev_id
                    user_state.save_user_state(user_id, state)
                    send_song(bot, chat, prev_song)
                    return
            # –µ—Å–ª–∏ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –≤–ø–µ—Ä—ë–¥ (–∏–ª–∏ —Å–ª—É—á–∞–π–Ω–∞—è)
            if not pool:
                bot.send_message(chat, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤.", reply_markup=main_menu_kb())
                return
            song = random.choice(pool)
            # –æ–±–Ω–æ–≤–ª—è–µ–º played: –¥–æ–±–∞–≤–ª—è–µ–º, –Ω–æ –Ω–µ –¥—É—à–∏–º –º–∞—Å—Å–∏–≤
            if song["id"] not in played:
                played.append(song["id"])
            state["played"] = played
            state["last_song_id"] = song["id"]
            user_state.save_user_state(user_id, state)
            send_song(bot, chat, song)
            update_stats("songs_played")
            return

        if txt == "‚ûï –í –ø–ª–µ–π–ª–∏—Å—Ç":
            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–µ—Å–Ω–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç
            if not last_song_id:
                bot.send_message(chat, "–ù–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.", reply_markup=main_menu_kb())
                return
            # –∑–∞–≥—Ä—É–∑–∏–º –ø–ª–µ–π–ª–∏—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: dict user_id -> list of playlists)
            pls_all = load_json(PLAYLISTS_FILE, {})
            pls_user = pls_all.get(str(user_id), [])
            if not pls_user:
                bot.send_message(chat, "–£ –≤–∞—Å –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?", reply_markup=create_playlist_kb())
                return
            # –ø—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç (–∫–Ω–æ–ø–∫–∏)
            kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
            for p in pls_user:
                kb.add(p["name"])
            kb.add("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", "üîô –í –º–µ–Ω—é")
            # –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state, —á—Ç–æ –º—ã –∂–¥—ë–º –≤—ã–±–æ—Ä–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            state["awaiting_add_song_id"] = last_song_id
            user_state.save_user_state(user_id, state)
            bot.send_message(chat, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–µ–π–ª–∏—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:", reply_markup=kb)
            return

    # ---- –ü–ª–µ–π–ª–∏—Å—Ç—ã: –ø–æ–∫–∞–∑–∞—Ç—å / —Å–æ–∑–¥–∞—Ç—å / –¥–æ–±–∞–≤–∏—Ç—å ----
    @bot.message_handler(func=lambda m: m.text == "üìÇ –ü–ª–µ–π–ª–∏—Å—Ç—ã")
    def show_playlists(message):
        user_id = message.from_user.id
        pls_all = load_json(PLAYLISTS_FILE, {})
        pls_user = pls_all.get(str(user_id), [])
        if not pls_user:
            bot.send_message(message.chat.id, "üìÇ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤.", reply_markup=create_playlist_kb())
            return
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        for p in pls_user:
            kb.add(p["name"])
        kb.add("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç", "üîô –í –º–µ–Ω—é")
        bot.send_message(message.chat.id, "–í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã:", reply_markup=kb)

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    @bot.message_handler(func=lambda m: m.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç")
    def create_playlist_start(message):
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞:")
        bot.register_next_step_handler(message, create_playlist_name)

    def create_playlist_name(message):
        name = (message.text or "").strip()
        if not name:
            bot.send_message(message.chat.id, "–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.", reply_markup=main_menu_kb())
            return
        user_id = message.from_user.id
        pls_all = load_json(PLAYLISTS_FILE, {})
        pls_user = pls_all.get(str(user_id), [])
        if any(p["name"].lower() == name.lower() for p in pls_user):
            bot.send_message(message.chat.id, "–ü–ª–µ–π–ª–∏—Å—Ç —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", reply_markup=main_menu_kb())
            return
        pls_user.append({"name": name, "songs": []})
        pls_all[str(user_id)] = pls_user
        save_json(PLAYLISTS_FILE, pls_all)
        update_stats("playlists_created")
        bot.send_message(message.chat.id, f"‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç ¬´{name}¬ª —Å–æ–∑–¥–∞–Ω.", reply_markup=main_menu_kb())

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞ (–≤ —Ç.—á. –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Å–Ω–∏)
    @bot.message_handler(func=lambda m: True)
    def playlist_selection_and_other(message):
        txt = (message.text or "").strip()
        user_id = message.from_user.id
        # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º: –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–µ–π–ª–∏—Å—Ç (–Ω–∞–∑–≤–∞–Ω–∏–µ)
        pls_all = load_json(PLAYLISTS_FILE, {})
        pls_user = pls_all.get(str(user_id), [])
        matching = next((p for p in pls_user if p["name"] == txt), None)
        if matching:
            # –µ—Å–ª–∏ –≤ state –µ—Å—Ç—å awaiting_add_song_id -> –¥–æ–±–∞–≤–ª—è–µ–º —Ç—É–¥–∞
            state = user_state.get_user_state(user_id)
            pending = state.get("awaiting_add_song_id")
            if pending:
                # –¥–æ–±–∞–≤–ª—è–µ–º song id (int)
                if pending not in matching["songs"]:
                    matching["songs"].append(pending)
                    save_json(PLAYLISTS_FILE, pls_all)
                    bot.send_message(message.chat.id, f"‚úÖ –ü–µ—Å–Ω—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç ¬´{matching['name']}¬ª", reply_markup=main_menu_kb())
                    # –æ—á–∏—Å—Ç–∏–º –æ–∂–∏–¥–∞–Ω–∏–µ
                    state.pop("awaiting_add_song_id", None)
                    user_state.save_user_state(user_id, state)
                    return
                else:
                    bot.send_message(message.chat.id, "–ü–µ—Å–Ω—è —É–∂–µ –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ.", reply_markup=main_menu_kb())
                    state.pop("awaiting_add_song_id", None)
                    user_state.save_user_state(user_id, state)
                    return
            # –µ—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ö–æ—Ç–µ–ª –ø—Ä–æ–∏–≥—Ä–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –ø–µ—Å–Ω–∏
            if matching.get("songs"):
                bot.send_message(message.chat.id, f"‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–∂—É –ø–ª–µ–π–ª–∏—Å—Ç ¬´{matching['name']}¬ª...")
                # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª—ã ‚Äî —É —Ç–µ–±—è —ç—Ç–æ –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ, –Ω–æ —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–º –ø–µ—Å–Ω–∏
                for sid in matching["songs"]:
                    s = next((x for x in load_json(SONGS_FILE, []) if x["id"] == sid), None)
                    if s:
                        bot.send_audio(message.chat.id, s.get("url", "").replace("file_id:", ""), caption=f"{s.get('name')} ‚Äî {s.get('artist')}")
                bot.send_message(message.chat.id, "–ì–æ—Ç–æ–≤–æ.", reply_markup=main_menu_kb())
                return
            else:
                bot.send_message(message.chat.id, "–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç.", reply_markup=main_menu_kb())
                return

        # –µ—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–ª–æ —Å –∏–º–µ–Ω–µ–º –ø–ª–µ–π–ª–∏—Å—Ç–∞ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º –∑–¥–µ—Å—å (–¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã—à–µ —É–∂–µ)
        # –¥–ª—è –ø—Ä–æ—á–∏—Ö —Å–ª—É—á–∞–µ–≤ ‚Äî –Ω–µ —à–ª—ë–º –æ—à–∏–±–∫–∏, –∞ –ø–æ–ø—Ä–æ—Å–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é
        if txt not in {"üé≤ –†–∞–Ω–¥–æ–º", "üéß –ñ–∞–Ω—Ä—ã", "üîç –ü–æ–∏—Å–∫", "üìÇ –ü–ª–µ–π–ª–∏—Å—Ç—ã", "üé§ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–µ—Å–Ω—é", "üîô –í –º–µ–Ω—é", "‚èÆ –ù–∞–∑–∞–¥", "‚è≠ –í–ø–µ—Ä—ë–¥", "‚ûï –í –ø–ª–µ–π–ª–∏—Å—Ç", "‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç"}:
            bot.send_message(message.chat.id, "üì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", reply_markup=main_menu_kb())

    # ---- –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Å–Ω–∏ (—Å –∫–æ–Ω—Ç—Ä–æ–ª–∞–º–∏) ----
    def send_song(bot_obj, chat_id, song):
        audio_id = song.get("url", "").replace("file_id:", "")
        caption = f"üéµ <b>{song.get('name')}</b>\nüë§ {song.get('artist')}\nüéº {song.get('genre')} | üåê {song.get('lang')}"
        try:
            bot_obj.send_audio(chat_id, audio_id, caption=caption, parse_mode="HTML")
        except Exception:
            # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ file_id –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
            try:
                bot_obj.send_audio(chat_id, song.get("url"))
            except Exception as e:
                bot_obj.send_message(chat_id, f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: {e}")
                return
        # –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (reply keyboard)
        bot_obj.send_message(chat_id, "üéß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–µ—Ä–æ–º:", reply_markup=player_kb())

    # —ç–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å (–µ—Å–ª–∏ –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏ —Ö–æ—Ç—è—Ç –≤—ã–∑–≤–∞—Ç—å)
    globals()["send_song"] = send_song
